{"ast":null,"code":"import _objectSpread from \"/Users/camilledesoubrie/Documents/applications/react-firebase-authentication/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/camilledesoubrie/Documents/applications/react-firebase-authentication/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\nvar config = {\n  apiKey: 'AIzaSyCZDjLFkcFbv-_U0NACLmB8inEudquqZa4',\n  authDomain: 'psh-alumni.firebaseapp.com',\n  databaseURL: 'https://psh-alumni.firebaseio.com',\n  projectId: 'psh-alumni',\n  storageBucket: 'psh-alumni.appspot.com',\n  messagingSenderId: '371602228378',\n  appId: '1:371602228378:web:18ed44d0f1cbd6b0e44b23',\n  measurementId: 'G-CJVH3D4YQP'\n};\n\nvar Firebase = function Firebase() {\n  var _this = this;\n\n  _classCallCheck(this, Firebase);\n\n  this.doCreateUserWithEmailAndPassword = function (email, password) {\n    return _this.auth.createUserWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithEmailAndPassword = function (email, password) {\n    return _this.auth.signInWithEmailAndPassword(email, password);\n  };\n\n  this.doSignInWithGoogle = function () {\n    return _this.auth.signInWithPopup(_this.googleProvider);\n  };\n\n  this.doSignInWithFacebook = function () {\n    return _this.auth.signInWithPopup(_this.facebookProvider);\n  };\n\n  this.doSignInWithTwitter = function () {\n    return _this.auth.signInWithPopup(_this.twitterProvider);\n  };\n\n  this.doSignOut = function () {\n    return _this.auth.signOut();\n  };\n\n  this.doPasswordReset = function (email) {\n    return _this.auth.sendPasswordResetEmail(email);\n  };\n\n  this.doSendEmailVerification = function () {\n    return _this.auth.currentUser.sendEmailVerification({\n      // url : process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n      url: 'http://localhost:3000'\n    });\n  };\n\n  this.doPasswordUpdate = function (password) {\n    return _this.auth.currentUser.updatePassword(password);\n  };\n\n  this.onAuthUserListener = function (next, fallback) {\n    return _this.auth.onAuthStateChanged(function (authUser) {\n      if (authUser) {\n        _this.user(authUser.uid).once('value').then(function (snapshot) {\n          var dbUser = snapshot.val(); // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = {};\n          } // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n  };\n\n  this.user = function (uid) {\n    return _this.db.ref(\"users/\".concat(uid));\n  };\n\n  this.users = function () {\n    return _this.db.ref('users');\n  };\n\n  this.message = function (uid) {\n    return _this.db.ref(\"messages/\".concat(uid));\n  };\n\n  this.messages = function () {\n    return _this.db.ref('messages');\n  };\n\n  app.initializeApp(config);\n  /* Helper */\n\n  this.serverValue = app.database.ServerValue;\n  this.emailAuthProvider = app.auth.EmailAuthProvider;\n  /* Firebase APIs */\n\n  this.auth = app.auth();\n  this.db = app.database();\n  /* Social Sign In Method Provider */\n\n  this.googleProvider = new app.auth.GoogleAuthProvider();\n  this.facebookProvider = new app.auth.FacebookAuthProvider();\n  this.twitterProvider = new app.auth.TwitterAuthProvider();\n} // *** Auth API ***\n;\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/camilledesoubrie/Documents/applications/react-firebase-authentication/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignInWithFacebook","facebookProvider","doSignInWithTwitter","twitterProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doSendEmailVerification","currentUser","sendEmailVerification","url","doPasswordUpdate","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","emailVerified","providerData","db","ref","users","message","messages","initializeApp","serverValue","database","ServerValue","emailAuthProvider","EmailAuthProvider","GoogleAuthProvider","FacebookAuthProvider","TwitterAuthProvider"],"mappings":"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","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst config = {\n\tapiKey            : 'AIzaSyCZDjLFkcFbv-_U0NACLmB8inEudquqZa4',\n\tauthDomain        : 'psh-alumni.firebaseapp.com',\n\tdatabaseURL       : 'https://psh-alumni.firebaseio.com',\n\tprojectId         : 'psh-alumni',\n\tstorageBucket     : 'psh-alumni.appspot.com',\n\tmessagingSenderId : '371602228378',\n\tappId             : '1:371602228378:web:18ed44d0f1cbd6b0e44b23',\n\tmeasurementId     : 'G-CJVH3D4YQP'\n};\n\nclass Firebase {\n\tconstructor() {\n\t\tapp.initializeApp(config);\n\n\t\t/* Helper */\n\n\t\tthis.serverValue = app.database.ServerValue;\n\t\tthis.emailAuthProvider = app.auth.EmailAuthProvider;\n\n\t\t/* Firebase APIs */\n\n\t\tthis.auth = app.auth();\n\t\tthis.db = app.database();\n\n\t\t/* Social Sign In Method Provider */\n\n\t\tthis.googleProvider = new app.auth.GoogleAuthProvider();\n\t\tthis.facebookProvider = new app.auth.FacebookAuthProvider();\n\t\tthis.twitterProvider = new app.auth.TwitterAuthProvider();\n\t}\n\n\t// *** Auth API ***\n\n\tdoCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n\tdoSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n\tdoSignInWithGoogle = () => this.auth.signInWithPopup(this.googleProvider);\n\n\tdoSignInWithFacebook = () => this.auth.signInWithPopup(this.facebookProvider);\n\n\tdoSignInWithTwitter = () => this.auth.signInWithPopup(this.twitterProvider);\n\n\tdoSignOut = () => this.auth.signOut();\n\n\tdoPasswordReset = (email) => this.auth.sendPasswordResetEmail(email);\n\n\tdoSendEmailVerification = () =>\n\t\tthis.auth.currentUser.sendEmailVerification({\n\t\t\t// url : process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT\n\t\t\turl : 'http://localhost:3000'\n\t\t});\n\n\tdoPasswordUpdate = (password) => this.auth.currentUser.updatePassword(password);\n\n\t// *** Merge Auth and DB User API *** //\n\n\tonAuthUserListener = (next, fallback) =>\n\t\tthis.auth.onAuthStateChanged((authUser) => {\n\t\t\tif (authUser) {\n\t\t\t\tthis.user(authUser.uid).once('value').then((snapshot) => {\n\t\t\t\t\tconst dbUser = snapshot.val();\n\n\t\t\t\t\t// default empty roles\n\t\t\t\t\tif (!dbUser.roles) {\n\t\t\t\t\t\tdbUser.roles = {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// merge auth and db user\n\t\t\t\t\tauthUser = {\n\t\t\t\t\t\tuid           : authUser.uid,\n\t\t\t\t\t\temail         : authUser.email,\n\t\t\t\t\t\temailVerified : authUser.emailVerified,\n\t\t\t\t\t\tproviderData  : authUser.providerData,\n\t\t\t\t\t\t...dbUser\n\t\t\t\t\t};\n\n\t\t\t\t\tnext(authUser);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tfallback();\n\t\t\t}\n\t\t});\n\n\t// *** User API ***\n\n\tuser = (uid) => this.db.ref(`users/${uid}`);\n\n\tusers = () => this.db.ref('users');\n\n\t// *** Message API ***\n\n\tmessage = (uid) => this.db.ref(`messages/${uid}`);\n\n\tmessages = () => this.db.ref('messages');\n}\n\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}